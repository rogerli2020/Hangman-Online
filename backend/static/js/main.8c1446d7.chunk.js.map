{"version":3,"sources":["components/timer.jsx","actions/index.js","components/chatbox.jsx","components/wordEntryScreen.jsx","components/guesserWaitScreen.jsx","components/connectionErrorScreen.jsx","components/scoreBoardScreen.jsx","components/wordBoard.jsx","components/eachKey.jsx","components/keyboard.jsx","components/wordInfoPanel.jsx","components/eachHint.jsx","components/hints.jsx","components/gameGrid.jsx","components/gameWaitScreen.jsx","components/conclusionPage.jsx","components/timerAutomatic.jsx","components/hintChoicePage.jsx","components/gameWelcomeScreen.jsx","components/game.js","containers/Home.js","actions/types.js","actions/auth.js","containers/Login.js","containers/Signup.js","containers/Activate.js","containers/ResetPassword.js","containers/ResetPasswordConfirm.js","containers/Facebook.js","containers/Google.js","containers/RedirectPage.js","reducers/allMessages.js","reducers/serverSocket.js","reducers/gamevars.js","reducers/gameState.js","reducers/currentRoundCount.js","reducers/hintsPool.js","reducers/ex.js","reducers/gsr.js","reducers/board.js","reducers/chosenWord.js","reducers/cguesses.js","reducers/fguesses.js","reducers/hints.js","reducers/hintRequested.js","reducers/p1ScoreBoard.js","reducers/p2ScoreBoard.js","reducers/rotated.js","reducers/roundState.js","reducers/wordWasRandom.js","reducers/guessedCorrectly.js","reducers/wrongGuesses.js","reducers/myPlayerId.js","reducers/disconnected.js","reducers/timer.js","reducers/auth.js","reducers/index.js","store.js","components/Navbar.js","hocs/Layout.js","utils/socketConnection.js","App.js","index.js"],"names":["Timer","props","seconds","useSelector","state","timerReducer","style","backgroundImage","display","padding","paddingLeft","marginBottom","noMargin","leftText","fontWeight","color","rightText","addNewMessage","newMessage","type","data","sendMessage","msg","Chatbox","dispatch","useDispatch","allMessages","allMessagesReducer","authInfo","auth","chatContainer","React","createRef","useEffect","scrollToMyRef","scroll","current","scrollHeight","clientHeight","scrollTo","Card","backgroundColor","fontSize","textAlign","margin","height","width","overflowY","wordWrap","ref","key","colorMapping","length","map","thisMessage","renderAllMessages","onSubmit","event","preventDefault","chatMessage","target","value","Input","placeholder","Button","WordEntryScreen","timeForChoosing","gamevarsReducer","compensationForRandom","position","zIndex","maxWidth","maxHeight","backdropFilter","Grid","container","spacing","item","xs","wordChosen","onClick","opacity","GuesserWaitScreen","myPlayerIdReducer","exReducer","gsrReducer","currentRoundCountReducer","ConnectionErrorScreen","serverSocketReducer","gameStateReducer","sx","marginTop","variant","window","location","reload","ScoreBoardScreen","p1ScoreBoard","p1ScoreBoardReducer","p2ScoreBoard","p2ScoreBoardReducer","myId","rotated","rotatedReducer","timer","guessedCorrectly","guessedCorrectlyReducer","chosenWord","chosenWordReducer","cguesses","cguessesReducer","iAm","determineWhosWinning","myScore","opponentScore","getScoreBoard","dic","fontStyle","borderStyle","borderColor","borderRadius","borderWidth","a","b","cguessesSet","Set","cwordSet","toUpperCase","split","guessedAllChars","size","Array","from","every","element","has","getWinMethod","paddingTop","WordBoard","wordBoard","boardReducer","justifyContent","alignItems","minHeight","join","EachKey","used","thisChar","minWidth","Keyboard","fguesses","fguessesReducer","gamevars","usedList","firstRow","secondRow","thirdRow","useState","enterGuess","setEnterGuess","handleSubmit","wordGuessed","handleToggle","handleHintRequest","eachChar","includes","marginLeft","WordInfoPanel","wrongGuesses","wrongGuessesReducer","changeWord","setChangeWord","hideWord","setHideWord","toggleChangeWord","wordInfoPanelScreen","changeWordScreen","newWord","EachHint","hintType","hintInfo","hintContent","hintId","allowClick","src","alt","Hints","hints","hintsReducer","eachHint","GuesserGrid","console","log","exId","gsrId","currentRoundCount","GameWaitScreen","gameState","paddingBottom","LinearProgress","ConclusionPage","user","TimerAutomatic","initialSeconds","setSeconds","myInterval","setInterval","clearInterval","HintChoicePage","hintsPool","hintsPoolReducer","GameWelcomeScreen","onClickFunc","Game","isReady","setIsReady","myPlayerId","ex","roundState","roundStateReducer","disconnected","disconnectedReducer","hintRequested","hintRequestedReducer","getServerResponse","url","pid","setFunc","toString","fetch","then","response","json","jsonObject","catch","error","Home","shallowEqual","userId","username","signed_in","top_players_rows","setTopPlayerRows","top_words_rows","setTopWordRows","my_stat_row","setMyStatsRow","className","class","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","border","scope","name","win_ratio","games_played","word","frequency","avg_score","LOGIN_SUCCESS","LOGIN_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_FAIL","FACEBOOK_AUTH_SUCCESS","FACEBOOK_AUTH_FAIL","LOGOUT","load_user","localStorage","getItem","config","headers","axios","get","process","res","payload","connect","isAuthenticated","login","email","password","body","JSON","stringify","post","formData","setFormData","correctComb","setCorrectComb","onChange","e","continueWithGoogle","replace","authorization_url","to","role","required","minLength","signup","first_name","last_name","re_password","accountCreated","setAccountCreated","verify","uid","token","match","verified","setVerified","params","reset_password","requestSent","setRequestSent","reset_password_confirm","new_password","re_new_password","facebookAuthenticate","code","details","formBody","Object","keys","encodeURIComponent","useLocation","values","queryString","parse","search","googleAuthenticate","RedirectPage","mainMsg","linkName","action","send","defaultConfig","reverse","wordWasRandomReducer","defaultVals","initialState","access","refresh","allReducers","combineReducers","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","logout","redirect","setRedirect","logout_user","data-toggle","data-target","aria-controls","aria-expanded","id","href","checkAuthenticated","children","SocketConnection","socket","WebSocket","onopen","onmessage","processMessage","onclose","wasClean","gsrInfo","exInfo","pool","num","msg_type","update_type","content","setCurrentRoundCount","board","setBoard","setFguesses","setHints","setHintRequested","setP1ScoreBoard","setP2ScoreBoard","setRotated","setRoundState","setWordWasRandom","setGuessedCorrectly","setWrongGuesses","setTimer","information_type","setMyPlayerId","notification_type","chat_type","sender","App","exact","path","Login","Signup","Facebook","Google","ResetPassword","ResetPasswordConfirm","Activate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c1446d7.chunk.js","sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux';\n\nconst Timer = (props) => {\n\n    const seconds = useSelector(state => state.timerReducer);\n\n    return (\n        <div style={{\n            backgroundImage: \"linear-gradient(to right, rgba(255,255,255,1), rgba(0,0,0,0))\",\n            display: \"flex\",\n            padding: \"2pt\",\n            paddingLeft: \"5pt\",\n            marginBottom: props.noMargin ? \"0pt\" : \"5pt\",\n        }}>\n            <div>{props.leftText}&nbsp;</div> \n                    <div>\n                    <div style={\n                        seconds <= 3 ?\n                        {fontWeight: \"bolder\", color: \"red\"} :\n                        {fontWeight: \"bolder\"}\n                    }> {seconds}</div> \n                </div>\n            <div>&nbsp;{props.rightText}</div>\n        </div>\n    )\n}\n\nexport default Timer;","export const addNewMessage = (newMessage) => {\n    return {\n        type: \"ADD_NEW_MESSAGE\",\n        data: newMessage\n    }\n}\n\nexport const setServerWebsocket = (ws) => {\n    return {\n        type: \"SET_SERVER_SOCKET\",\n        data: ws\n    }\n}\n\nexport const sendMessage = (msg) => {\n    return {\n        type: \"SEND_MESSAGE\",\n        data: msg\n    }\n}\n\nexport const setGamevars = (gamevars) => {\n    return {\n        type: \"SET_GAMEVARS\",\n        data: gamevars\n    }\n}\n\nexport const setGameState = (num) => {\n    return {\n        type: \"SET_GAME_STATE\",\n        data: num\n    }\n}\n\nexport const setCurrentRoundCount = (num) => {\n    return {\n        type: \"SET_CURRENT_ROUND_COUNT\",\n        data: num\n    }\n}\n\nexport const setChosenWord = (chosenWord) => {\n    return {\n        type: \"SET_CHOSEN_WORD\",\n        data: chosenWord\n    }\n}\n\nexport const setHintsPool = (pool) => {\n    return {\n        type: \"SET_HINTS_POOL\",\n        data: pool\n    }\n}\n\nexport const setEx = (exInfo) => {\n    return {\n        type: \"SET_EX\",\n        data: exInfo\n    }\n}\n\nexport const setGsr = (gsrInfo) => {\n    return {\n        type: \"SET_GSR\",\n        data: gsrInfo\n    }\n}\n\nexport const setBoard = (board) => {\n    return {\n        type: \"SET_BOARD\",\n        data: board\n    }\n}\n\nexport const setCguesses = (data) => {\n    return {\n        type: \"SET_CGUESSES\",\n        data: data\n    }\n}\n\nexport const setFguesses = (data) => {\n    return {\n        type: \"SET_FGUESSES\",\n        data: data\n    }\n}\n\nexport const setHints = (data) => {\n    return {\n        type: \"SET_HINTS\",\n        data: data\n    }\n}\n\nexport const setHintRequested = (data) => {\n    return {\n        type: \"SET_HINT_REQUESTED\",\n        data: data\n    }\n}\n\nexport const setP1ScoreBoard = (data) => {\n    return {\n        type: \"SET_P1_SCORE_BOARD\",\n        data: data\n    }\n}\n\nexport const setP2ScoreBoard = (data) => {\n    return {\n        type: \"SET_P2_SCORE_BOARD\",\n        data: data\n    }\n}\n\nexport const setRotated = (data) => {\n    return {\n        type: \"SET_ROTATED\",\n        data: data\n    }\n}\n\nexport const setRoundState = (data) => {\n    return {\n        type: \"SET_ROUND_STATE\",\n        data: data\n    }\n}\n\nexport const setWordWasRandom = (data) => {\n    return {\n        type: \"SET_WORD_WAS_RANDOM\",\n        data: data\n    }\n}\n\nexport const setGuessedCorrectly = (data) => {\n    return {\n        type: \"SET_GUESSED_CORRECTLY\",\n        data: data\n    }\n}\n\nexport const setWrongGuesses = (data) => {\n    return {\n        type: \"SET_WRONG_GUESSES\",\n        data: data\n    }\n}\n\nexport const setMyPlayerId = (data) => {\n    return {\n        type: \"SET_MY_PLAYER_ID\",\n        data: data\n    }\n}\n\nexport const setDisconnected = (data) => {\n    return {\n        type: \"SET_DISCONNECTED\",\n        data: data\n    }\n}\n\nexport const setTimer = (data) => {\n    return {\n        type: \"SET_TIMER\",\n        data: data\n    }\n}\n\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Input, Button, Card } from '@mui/material';\nimport {\n    sendMessage\n} from \"../actions\"\n\nfunction Chatbox() {\n\n    const dispatch = useDispatch();\n    const allMessages = useSelector(state => state.allMessagesReducer);\n    const authInfo = useSelector(state => state.auth);\n    const chatContainer = React.createRef();\n\n    // const AlwaysScrollToBottom = () => {\n    //     const elementRef = useRef();\n    //     useEffect(() => elementRef.current.scrollIntoView({ behavior: 'smooth' }));\n    //     return <div ref={elementRef}/>;\n    // } \n\n    useEffect(() => {scrollToMyRef()})\n\n    const scrollToMyRef = () => {\n        const scroll =\n          chatContainer.current.scrollHeight -\n          chatContainer.current.clientHeight;\n        chatContainer.current.scrollTo(0, scroll);\n      };\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const chatMessage = event.target[0].value\n        dispatch(\n            sendMessage(\n                {\n                    \"msg_type\": \"chat\",\n                    \"content\": chatMessage,\n                    \"access_token\": authInfo[\"access\"],\n                }\n            )\n        )\n        event.target[0].value = \"\";\n    }\n\n    const renderAllMessages = () => {\n        let key = 100;\n        const colorMapping = {\n            \"warning\": \"red\",\n            \"success\": \"green\",\n            \"normal\": \"black\"\n        }\n        if (allMessages.length === 0) {\n            return <div style={{color: \"gray\", fontSize: \"small\", margin: \"5px\"}}>No messages...</div>\n        } else {\n            return (\n                allMessages.map(\n                    thisMessage => (\n                        <div \n                            key={key++}\n                            style={{\n                                color: colorMapping[thisMessage[\"chat_type\"]], \n                                fontSize: \"small\", \n                                margin: \"5px\"\n                            }}\n                        >\n                            {\"[\" + thisMessage[\"sender\"] + \"] \" + thisMessage[\"content\"]}\n                        </div>\n                    )\n                )\n            )\n        }\n    }\n\n    return (\n        <Card style={{backgroundColor:\"rgba(255,255,255,0.75)\"}}>\n            <div style={{display:\"block\"}}>\n                {/* <div style={{fontSize: \"small\", textAlign: \"center\", padding: \"5px\"}}>CHAT MESSAGES</div> */}\n                <div style={{\n                    fontSize: \"small\",\n                    textAlign: \"center\",\n                    margin: \"5px\"\n                }}>\n                    CHAT MESSAGES\n                </div>\n\n                <div style={{\n                    backgroundColor: \"white\",\n                    height: \"150px\",\n                    width: \"100%\",\n                    overflowY: \"scroll\",\n                    wordWrap: \"break-word\",\n                }} \n                    ref={chatContainer}\n                >\n                    {\n                        renderAllMessages()\n                    }\n                </div>\n\n                <div style={{textAlign: \"center\", width: \"100%\"}}>\n                    <form onSubmit={handleSubmit}>\n                        <Input placeholder=\"Chat here...\"/>\n                        <Button type=\"submit\" value=\"submit\">Send</Button>\n                    </form>\n                </div>\n            </div>\n        </Card>\n    )\n}\n\nexport default Chatbox;","import React from 'react';\nimport Timer from './timer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Grid, Card, Input } from '@mui/material';\nimport Chatbox from './chatbox';\nimport {\n    sendMessage\n} from \"../actions\"\n\nfunction WordEntryScreen() {\n\n    const dispatch = useDispatch();\n    const timeForChoosing = useSelector(state => state.gamevarsReducer)[\"TIME_FOR_CHOOSING\"];\n    const authInfo = useSelector(state => state.auth)\n    const compensationForRandom = useSelector(state => state.gamevarsReducer)[\"COMPENSATION_FOR_RANDOM\"];\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const wordChosen = event.target[0].value\n        dispatch(\n            sendMessage(\n                {\n                    \"msg_type\": \"action\",\n                    \"action_type\": \"choose_word\",\n                    \"content\": wordChosen,\n                    \"access_token\": authInfo[\"access\"]\n                }\n            )\n        )\n        event.target[0].value = \"\";\n    }\n    const handleRandom = () => {\n        dispatch(\n            sendMessage(\n                {\n                    \"msg_type\": \"action\",\n                    \"action_type\": \"choose_word\",\n                    \"content\": \"__RANDOM__\",\n                    \"access_token\": authInfo[\"access\"]\n                }\n            )\n        )\n    }\n\n    return (\n        <div style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"rgba(0,0,0,0.4)\",\n            zIndex: \"2\",\n            maxWidth: \"1000px\",\n            maxHeight: \"750px\",\n            backdropFilter: \"blur(50px)\"\n        }}>\n            <div style={{margin:\"50px\"}}>\n                <Grid container spacing={1}>\n\n                    <Grid item xs={12}>\n                        <Timer\n                                seconds={timeForChoosing}\n                                leftText={\"A random word will be chosen in\"}\n                                rightText={\"seconds...\"}\n                            />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div style={{\n                                fontSize: \"xx-large\",\n                                fontWeight: \"bolder\",\n                                color: \"white\"\n                                }}>\n                                    YOU'RE THE EXECUTIONER\n                            </div>\n                            <div style={{color: \"white\"}}>Enter a word for the Guesser to guess...</div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <hr></hr>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Card style={{backgroundColor: \"rgba(255,255,255,0.75)\", padding: \"25px\"}}>\n                            <form onSubmit={handleSubmit}>\n                                    <Input placeholder=\"Enter your word here...\" />\n                                    <Button type=\"submit\" value=\"submit\">SUBMIT</Button>\n                                    <Button onClick={handleRandom}>GO RANDOM*</Button>\n                                    <p style={{fontSize:\"small\", opacity:\"75%\"}}>* Your opponent will be compensated for {compensationForRandom} points if you choose random.</p>\n                            </form>\n                        </Card>\n                    </Grid>\n\n                    <Grid item xs={5}>\n                            <Chatbox/>\n                    </Grid>\n                    <Grid item xs={7}>\n                        <Card style={{backgroundColor: \"rgba(255,255,255,0.4)\", height: \"100%\"}}>\n                        </Card>\n                    </Grid>\n\n                </Grid>\n            </div>\n        </div>\n    )\n}\n\nexport default WordEntryScreen;","import React from 'react';\nimport Timer from './timer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Grid, Card, Input } from '@mui/material';\nimport Chatbox from './chatbox';\n\nfunction GuesserWaitScreen() {\n\n    const dispatch = useDispatch();\n    const timeForChoosing = useSelector(state => state.gamevarsReducer)[\"TIME_FOR_CHOOSING\"];\n    const compensationForRandom = useSelector(state => state.gamevarsReducer)[\"COMPENSATION_FOR_RANDOM\"];\n    const myId = useSelector(state => state.myPlayerIdReducer)[\"id\"];\n    const exId = useSelector(state => state.exReducer);\n    const gsrId = useSelector(state => state.gsrReducer);\n    const currentRoundCount = useSelector(state => state.currentRoundCountReducer);\n\n    return (\n        <div style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"rgba(0,0,0,0.4)\",\n            zIndex: \"2\",\n            maxWidth: \"1000px\",\n            maxHeight: \"750px\",\n            backdropFilter: \"blur(50px)\"\n        }}>\n            <div style={{margin:\"50px\"}}>\n                <Grid container spacing={1}>\n\n                    <Grid item xs={12}>\n                        <Timer\n                                seconds={timeForChoosing}\n                                rightText={\"seconds left for the Executioner to choose...\"}\n                            />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div style={{\n                                fontSize: \"xx-large\",\n                                fontWeight: \"bolder\",\n                                color: \"white\"\n                                }}>\n                                    YOU'RE THE GUESSER\n                            </div>\n                            <div style={{color: \"white\"}}>Please wait for the Executioner to make their word choice.</div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <hr></hr>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Card style={{backgroundColor: \"rgba(255,255,255,0.75)\", padding: \"50px\"}}>\n                        </Card>\n                    </Grid>\n\n                    <Grid item xs={5}>\n                        <Chatbox/>\n                    </Grid>\n                    <Grid item xs={7}>\n                        <Card style={{backgroundColor: \"rgba(255,255,255,0.4)\", height: \"100%\"}}>\n                        </Card>\n                    </Grid>\n\n                </Grid>\n            </div>\n        </div>\n    )\n}\n\nexport default GuesserWaitScreen;","import React from 'react';\nimport Timer from './timer';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport { useSelector } from 'react-redux';\nimport { Button } from '@mui/material';\n\nfunction ConnectionErrorScreen() {\n\n    let serverSocket = useSelector(state => state.serverSocketReducer);\n    let gameState = useSelector(state => state.gameStateReducer);\n    let gamevars = useSelector(state => state.gamevarsReducer);\n\n    return (\n        // getMessage()\n        <div style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundImage: \"linear-gradient(to left top, rgba(0,0,0,0.5), rgba(255,0,0,0.75))\",\n            zIndex: \"2\",\n            maxWidth: \"1000px\",\n            maxHeight: \"750px\",\n            backdropFilter: \"blur(25px)\",\n        }}>\n            <div style={{margin:\"50px\"}}>\n                <div style={{color: \"white\", display: \"block\", width: \"100%\", height: \"100%\"}}>\n                    <div>\n                        <WarningIcon sx={{ fontSize: 100 }}/>\n                        <div style={{fontSize: \"xx-large\", marginTop: \"20px\", fontWeight:\"bolder\"}}>Server connection lost.</div>\n                        <div style={{fontSize: \"medium\"}}>The server or your Internet might be down.</div>\n                    </div>\n                    <br/>\n                    <br/>\n                    <Button\n                        style={{\n                            color:\"white\"\n                        }}\n                        variant=\"outlined\"\n                        onClick={  function reloadPage() {window.location.reload(false)} }>RETRY CONNECTION</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ConnectionErrorScreen;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Grid, Card } from '@mui/material';\nimport Chatbox from './chatbox';\n\nfunction ScoreBoardScreen() {\n\n    const p1ScoreBoard = useSelector(state => state.p1ScoreBoardReducer);\n    const p2ScoreBoard = useSelector(state => state.p2ScoreBoardReducer);\n    const myId = useSelector(state => state.myPlayerIdReducer)[\"id\"];\n    const rotated = useSelector(state => state.rotatedReducer);\n    const timer = useSelector(state => state.timerReducer);\n    const guessedCorrectly = useSelector(state => state.guessedCorrectlyReducer);\n    const chosenWord = useSelector(state => state.chosenWordReducer);\n    const cguesses = useSelector(state => state.cguessesReducer);\n\n    const iAm = myId === p1ScoreBoard[\"ID\"] ? \"p1\" : \"p2\";\n\n    const setsAreEqual = (a, b) => {\n        if (a.size !== b.size) {\n          return false;\n        }\n      \n        return Array.from(a).every(element => {\n          return b.has(element);\n        });\n      }\n\n    const getWinMethod = () => {\n        if (chosenWord === null) {\n            return (<div></div>)\n        }\n        const cguessesSet = new Set(cguesses);\n        const cwordSet = new Set(chosenWord.toUpperCase().split(''));\n        const guessedAllChars = setsAreEqual(cguessesSet, cwordSet);\n        if (guessedCorrectly) {\n            return \"The Guesser entered a correct word guess.\";\n        } else if (guessedAllChars) {\n            return \"The Guesser guessed all correct letters.\";\n        } else {\n            return \"The Guesser failed to guess the word in time.\"\n        }\n    }\n\n    const determineWhosWinning = () => {\n        const myScore = iAm === \"p1\" ? p1ScoreBoard[\"GAME_TOTAL\"] : p2ScoreBoard[\"GAME_TOTAL\"];\n        const opponentScore = iAm === \"p1\" ? p2ScoreBoard[\"GAME_TOTAL\"] : p1ScoreBoard[\"GAME_TOTAL\"];\n        if (myScore === opponentScore) {\n            return \"TIE\"\n        } else if (myScore < opponentScore) {\n            return \"LOSING\"\n        } else {\n            return \"WINNING\"\n        }\n    }\n\n    const getWinLoseInfo = () => {\n        if (rotated) {\n            return (\n                <div style={{margin: \"50px\"}}>\n                    <div style={{textAlign:\"center\", color:\"white\", fontSize:\"x-large\", fontWeight:\"normal\"}}>\n                        {\n                            determineWhosWinning() === \"TIE\" ? \"The game is at a tie.\" : (determineWhosWinning() === \"WINNING\" ? \"You are winning.\" : \"Your opponent is winning.\")\n                        }\n                    </div>\n                    <div style={{textAlign:\"center\", color:\"white\", fontSize:\"large\", fontWeight:\"lighter\"}}>\n                        Game will continue in {timer}...\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <div style={{textAlign:\"center\", color:\"white\", fontSize:\"large\", fontWeight:\"normal\", margin: \"50px\"}}>\n                    Game will continue in {timer}...\n                </div>\n            )\n        }\n    }\n\n    const getScoreBoard = (dic) => {\n        if (dic[\"DISCONNECTED\"]) {\n            return (\n                <div style={{\n                    color: \"red\",\n                    height: \"100%\",\n                    padding: \"10px\",\n                    fontSize: \"small\",\n                    textAlign: \"center\",\n                    fontWeight: \"bolder\"\n                }}>\n                    PLAYER DISCONNECTED\n                </div>\n            )\n        }\n        if (dic[\"FINISHED_GUESSING\"] === true) {\n            return (\n                <div style={{\n                    color: \"white\",\n                }}>\n                        <Grid container spacing={0.1}>\n                            <Grid item xs={8}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.10)\", padding:\"5px\", textAlign: \"right\"}}>\n                                    PROGRESSION SCORE\n                                </div>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.10)\", padding:\"5px\", textAlign: \"left\", fontWeight: \"bolder\"}}>\n                                    {dic[\"PROGRESSION\"]}\n                                </div>\n                            </Grid>\n\n                            <Grid item xs={8}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.0)\", padding:\"5px\", textAlign: \"right\"}}>\n                                    BASE SCORE\n                                </div>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.0)\", padding:\"5px\", textAlign: \"left\", fontWeight: \"bolder\"}}>\n                                    {dic[\"BASE\"]}\n                                </div>\n                            </Grid>\n\n                            <Grid item xs={8}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.10)\", padding:\"5px\", textAlign: \"right\"}}>\n                                    BONUS\n                                </div>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.10)\", padding:\"5px\", textAlign: \"left\", fontWeight: \"bolder\"}}>\n                                    {dic[\"BONUS\"]}\n                                </div>\n                            </Grid>\n\n                            <Grid item xs={8}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.0)\", padding:\"5px\", textAlign: \"right\"}}>\n                                    PENALTY\n                                </div>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.0)\", padding:\"5px\", textAlign: \"left\", fontWeight: \"bolder\"}}>\n                                    {dic[\"PENALTY\"]}\n                                </div>\n                            </Grid>\n\n                            <Grid item xs={8}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.10)\", padding:\"5px\", textAlign: \"right\"}}>\n                                    COMPENSATION\n                                </div>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.10)\", padding:\"5px\", textAlign: \"left\", fontWeight: \"bolder\"}}>\n                                    {dic[\"COMPENSATION\"]}\n                                </div>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                            </Grid>\n\n                            <Grid item xs={8}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.0)\", padding:\"5px\", textAlign: \"right\"}}>\n                                    ROUND TOTAL\n                                </div>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <div style={{backgroundColor:\"rgba(255,255,255,0.0)\", padding:\"5px\", textAlign: \"left\", fontWeight: \"bolder\"}}>\n                                    {dic[\"ROUND_TOTAL\"]}\n                                </div>\n                            </Grid>\n\n                        </Grid>\n                </div>\n            )\n        } else if (dic[\"FINISHED_GUESSING\"] === false) {\n            return (\n                <div style={{\n                    color: \"rgba(255,255,255,0.5)\",\n                    height: \"100%\",\n                    padding: \"10px\",\n                    fontSize: \"small\",\n                    fontStyle:\"italic\",\n                    textAlign: \"center\",\n                }}>\n                    Hasn't played as the Guesser yet...\n                </div>\n            )\n        }\n    }\n\n    return (\n        // getMessage()\n        <div style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"rgba(0,0,0,0.4)\",\n            zIndex: \"2\",\n            maxWidth: \"1000px\",\n            maxHeight: \"750px\",\n            backdropFilter: \"blur(50px)\"\n        }}>\n            <div style={{margin:\"50px\"}}>\n                <Grid container spacing={1}>\n\n                    <Grid item xs={12}>\n                        <div style={{textAlign:\"center\", backgroundColor: \"rgba(0,0,0,0.5)\"}}>\n                            <div style={{\n                                color: \"white\",\n                                fontSize: \"small\",\n                                backgroundColor: \"rgba(0,0,0,0.5)\",\n                                padding: \"5px\",\n                            }}>\n                                CORRECT WORD\n                            </div>\n                            <div style={{\n                                color: \"white\",\n                                fontSize: \"xx-large\",\n                                fontWeight: \"bolder\",\n                                padding: \"10px\"\n                            }}>\n                                {chosenWord}\n                            </div>\n                        </div>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <div style={{textAlign:\"center\", backgroundColor: \"rgba(0,0,0,0.5)\"}}>\n                                <div style={{\n                                    color: \"white\",\n                                    fontSize: \"small\",\n                                    backgroundColor: \"rgba(0,0,0,0.5)\",\n                                    padding: \"5px\",\n                                }}>\n                                    {p1ScoreBoard[\"NAME\"]}'s SCORE\n                                </div>\n                            </div>\n                            <div style={{backgroundColor: \"rgba(0,0,0,0.5)\"}}>\n                                {getScoreBoard(\n                                    p1ScoreBoard\n                                )}\n\n                                <Grid container spacing={0.1} style={ (p1ScoreBoard[\"GAME_TOTAL\"] > p2ScoreBoard[\"GAME_TOTAL\"] && rotated) ?\n                                    {color: \"white\", \n                                    borderStyle:\"solid\", \n                                    borderColor: \"red\", \n                                    borderRadius:\"5px\", \n                                    borderWidth: \"3pt\"\n                                    } : {}}>\n                                        <Grid item xs={8}>\n                                        <div style={{backgroundColor:\"rgba(255,255,255,0.50)\", padding:\"5px\", textAlign: \"right\", fontWeight:\"bolder\"}}>\n                                            GAME TOTAL\n                                        </div>\n                                    </Grid>\n                                    <Grid item xs={4}>\n                                        <div style={{backgroundColor:\"rgba(255,255,255,0.50)\", padding:\"5px\", textAlign: \"left\", fontWeight: \"bolder\"}}>\n                                            {p1ScoreBoard[\"GAME_TOTAL\"]}\n                                        </div>\n                                    </Grid>\n                                </Grid>\n\n                            </div>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <div style={{textAlign:\"center\", backgroundColor: \"rgba(0,0,0,0.5)\"}}>\n                                <div style={{\n                                    color: \"white\",\n                                    fontSize: \"small\",\n                                    backgroundColor: \"rgba(0,0,0,0.5)\",\n                                    padding: \"5px\",\n                                }}>\n                                    {p2ScoreBoard[\"NAME\"]}'s SCORE\n                                </div>\n                            </div>\n                            <div style={{backgroundColor: \"rgba(0,0,0,0.5)\"}}>\n                                {getScoreBoard(\n                                    p2ScoreBoard\n                                )}\n\n                            <Grid container spacing={0.1} style={ (p2ScoreBoard[\"GAME_TOTAL\"] > p1ScoreBoard[\"GAME_TOTAL\"] && rotated) ?\n                                    {color: \"white\", \n                                    borderStyle:\"solid\", \n                                    borderColor: \"red\", \n                                    borderRadius:\"5px\", \n                                    borderWidth: \"3pt\"\n                                    } : {}}>                                        \n                                    <Grid item xs={8}>\n                                        <div style={{backgroundColor:\"rgba(255,255,255,0.50)\", padding:\"5px\", textAlign: \"right\", fontWeight:\"bolder\"}}>\n                                            GAME TOTAL\n                                        </div>\n                                    </Grid>\n                                    <Grid item xs={4}>\n                                        <div style={{backgroundColor:\"rgba(255,255,255,0.50)\", padding:\"5px\", textAlign: \"left\", fontWeight: \"bolder\"}}>\n                                            {p2ScoreBoard[\"GAME_TOTAL\"]}\n                                        </div>\n                                    </Grid>\n                                </Grid>\n\n                            </div>\n                    </Grid>\n\n                    <Grid item xs={5}>\n                        <Chatbox/>\n                    </Grid>\n\n                    <Grid item xs={7}>\n                        <Card style={{backgroundColor:\"rgba(0,0,0,0.75)\", height:\"100%\"}}>\n                            <div style={{color:\"white\", marginTop:\"20px\", textAlign: \"center\", fontSize:\"large\", fontWeight: \"bolder\"}}>\n                                {getWinMethod()}\n                                <hr/>\n                            </div>\n                            {getWinLoseInfo()}\n                        </Card>\n                    </Grid>\n\n\n\n                </Grid>\n                <div style={{display: \"flex\", paddingTop: \"5px\", color: \"white\", opacity: \".5\"}}>\n                        <div style={{fontWeight: \"bolder\", fontSize: \"large\"}}>H A N G M _ N</div>\n                        <div style={{fontWeight: \"lighter\", fontSize: \"medium\"}}>ONLINE</div>\n                    </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default ScoreBoardScreen;","import React from 'react'\nimport { useSelector } from 'react-redux';\n\nfunction WordBoard() {\n\n    let wordBoard = useSelector(state => state.boardReducer);\n\n    return (\n        <div style={{\n            color: \"black\", \n            backgroundColor: \"white\",\n            textAlign: \"center\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            fontSize: \"xx-large\",\n            minHeight: \"150px\",\n            maxHeight: \"250px\",\n            height: \"100%\",\n            }}>\n            {wordBoard.join(\" \")}\n        </div>\n    )\n}\n\nexport default WordBoard;","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sendMessage } from \"../actions\"\n\nfunction EachKey(props) {\n\n    const authInfo = useSelector(state => state.auth)\n    const dispatch = useDispatch();\n    const handleClick = () => {\n        if (!props.used) {\n            const msg = {\n                \"msg_type\": \"action\",\n                \"action_type\": \"guess_letter\",\n                \"content\": props.thisChar,\n                \"access_token\": authInfo[\"access\"]\n            }\n            dispatch(sendMessage(msg))\n        }\n    }\n\n    return (\n        <div\n            onClick={ handleClick }\n            style={{\n                backgroundColor: \"rgba(0, 0, 0, 0.75)\",\n                opacity: props.used ? \"25%\" : \"100%\",\n                color: \"white\",\n                minWidth: \"10px\",\n                height: \"50px\",\n                maxWidth: \"50px\",\n                borderRadius: \"5px\",\n                textAlign: \"center\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                margin: \"1px\",\n                width: \"100%\",\n            }}\n        >\n            {props.thisChar}\n        </div>\n    )\n}\n\nexport default EachKey;","import { React, useState } from 'react'\nimport EachKey from './eachKey';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Input, Card } from '@mui/material';\nimport {\n    sendMessage\n} from \"../actions\"\n\nfunction Keyboard() {\n\n    const dispatch = useDispatch();\n    const cguesses = useSelector(state => state.cguessesReducer);\n    const fguesses = useSelector(state => state.fguessesReducer);\n    const gamevars = useSelector(state => state.gamevarsReducer);\n    const authInfo = useSelector(state => state.auth);\n    const usedList = cguesses + fguesses;\n    const firstRow = [\"Q\",\"W\",\"E\",\"R\",\"T\",\"Y\",\"U\",\"I\",\"O\",\"P\"];\n    const secondRow = [\"A\",\"S\",\"D\",\"F\",\"G\",\"H\",\"J\",\"K\",\"L\"];\n    const thirdRow = [\"Z\",\"X\",\"C\",\"V\",\"B\",\"N\",\"M\"]\n    let key = 0;\n\n    const [enterGuess, setEnterGuess] = useState(false)\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const wordGuessed = event.target[0].value\n        dispatch(\n            sendMessage(\n                {\n                    \"msg_type\": \"action\",\n                    \"action_type\": \"guess_word\",\n                    \"content\": wordGuessed,\n                    \"access_token\": authInfo[\"access\"]\n                }\n            )\n        )\n        event.target[0].value = \"\";\n        handleToggle();\n    }\n\n    const handleToggle = () => {\n        const currState = enterGuess;\n        setEnterGuess(!currState);\n    }\n\n    const guessEntranceScreen = () => {\n        return (\n            <Card style={{backgroundColor:\"rgba(255,255,255,0.9)\"}}>\n                <div style={{fontSize: \"small\", marginTop:\"10px\", textAlign:\"center\"}}>WORD GUESS ENTRY</div>\n                <hr/>\n                <div style={{color:\"black\", padding:\"25px\"}}>\n                    <form onSubmit={handleSubmit}>\n                        <Input color=\"primary\" placeholder=\"Enter your guess here...\" />\n                        <Button type=\"submit\" value=\"submit\">SUBMIT</Button>\n                        <Button onClick={handleToggle}>GO BACK</Button>\n                        <p style={{fontSize:\"small\", opacity:\"75%\"}}>* You will be penalized for {-gamevars[\"PENALTY_FOR_FALSE_GUESS\"]} points if your guess is wrong.<br/>Please double check to ensure that your spelling is correct.</p>\n                    </form>\n                </div>\n            </Card>\n        )\n    }\n\n    const handleHintRequest = () => {\n        dispatch(\n            sendMessage(\n                {\n                    \"msg_type\": \"action\",\n                    \"action_type\": \"request_hint\",\n                    \"content\": \"None\",\n                    \"access_token\": authInfo[\"access\"]\n                }\n            )\n        )\n    }\n\n    const keyboardScreen = () => {\n        return (\n            <div style={{padding: \"10px\"}}>\n            <div style={{display: \"flex\"}}>\n                {\n                    firstRow.map(\n                        eachChar => (\n                            <EachKey \n                                key={key++}\n                                used={usedList.includes(eachChar) ? true : false}\n                                thisChar={eachChar}\n                            />\n                        )\n                    )\n                }\n            </div>\n            <div style={{display: \"flex\", marginLeft: \"10px\"}}>\n                {\n                    secondRow.map(\n                        eachChar => (\n                            <EachKey \n                                key={key++}\n                                used={usedList.includes(eachChar) ? true : false}\n                                thisChar={eachChar}\n                            />\n                        )\n                    )\n                }\n            </div>\n            <div style={{display: \"flex\", marginLeft: \"30px\"}}>\n                {\n                    thirdRow.map(\n                        eachChar => (\n                            <EachKey \n                                key={key++}\n                                used={usedList.includes(eachChar) ? true : false}\n                                thisChar={eachChar}\n                            />\n                        )\n                    )\n                }\n            </div>\n            <div style={{margin: \"25px\", display:\"flex\", justifyContent: \"space-between\"}}>\n                <Button variant=\"contained\" size=\"medium\" color=\"primary\" onClick={handleToggle}>\n                    Enter word guess\n                </Button>\n                <Button variant=\"contained\" size=\"medium\" color=\"warning\" onClick={handleHintRequest}>\n                    Request Hint (-25 PTS.)\n                </Button>\n            </div>\n        </div>\n        )\n    }\n\n    return (\n        <div>\n            {\n                enterGuess ? guessEntranceScreen() : keyboardScreen()\n            }\n        </div>\n    )\n}\n\nexport default Keyboard;","import { React, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Input, Card } from '@mui/material';\nimport {\n    sendMessage\n} from \"../actions\"\n\nfunction WordInfoPanel() {\n\n    const dispatch = useDispatch();\n    const chosenWord = useSelector(state => state.chosenWordReducer);\n    const authInfo = useSelector(state => state.auth);\n    const wrongGuesses = useSelector(state => state.wrongGuessesReducer);\n    const fguesses = useSelector(state => state.fguessesReducer);\n    const gamevars = useSelector(state => state.gamevarsReducer);\n\n    const [changeWord, setChangeWord] = useState(false)\n    const [hideWord, setHideWord] = useState(false)\n\n    const toggleChangeWord = () => {\n        const prev = changeWord\n        setChangeWord(!prev)\n    }\n\n    const toggleHideWord = () => {\n        const prev = hideWord\n        setHideWord(!prev)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newWord = event.target[0].value\n        dispatch(\n            sendMessage(\n                {\n                    \"msg_type\": \"action\",\n                    \"action_type\": \"change_word\",\n                    \"content\": newWord,\n                    \"access_token\": authInfo[\"access\"],\n                }\n            )\n        )\n        event.target[0].value = \"\";\n        toggleChangeWord();\n    }\n\n    const wordInfoPanelScreen = (\n            <div style={{color: 'white', padding: \"25px\"}}>\n                <div style={{fontSize:\"small\", backgroundColor: \"rgba(0,0,0,0.5)\", padding:\"3px\", opacity:\".75\"}}>CORRECT WORD</div>\n                <div style={{fontSize:\"x-large\", marginLeft: \"10px\"}}>{hideWord ? \"[HIDDEN]\" : (chosenWord == null ? \"Waiting...\" : chosenWord)}</div>\n                <br/>\n                <div style={{fontSize:\"small\", backgroundColor: \"rgba(0,0,0,0.5)\", padding:\"3px\", opacity:\".75\"}}>INCORRECT CHARACTER GUESSES</div>\n                <div style={{fontSize: fguesses.length === 0 ? \"small\" : \"large\", marginLeft: \"10px\"}}>{fguesses.length === 0 ? \"None so far...\" : fguesses.join(\" \")}</div>\n                <br/>\n                <div style={{fontSize:\"small\", backgroundColor: \"rgba(0,0,0,0.5)\", padding:\"3px\", opacity:\".75\"}}>INCORRECT WORD GUESSES</div>\n                <div style={{fontSize: wrongGuesses.length === 0 ? \"small\" : \"large\", marginLeft: \"10px\"}}>{wrongGuesses.length === 0 ? \"None so far...\" : wrongGuesses.join(\" \")}</div>\n                <br></br>\n                <Button onClick={toggleHideWord} variant=\"contained\">{hideWord ? \"UNHIDE WORD\" : \"HIDE WORD\"}</Button>\n                <Button onClick={toggleChangeWord} variant=\"contained\" style={{marginLeft:\"5px\"}}>CHANGE WORD</Button>\n            </div>\n    )\n\n    const changeWordScreen = (\n        <Card style={{backgroundColor:\"rgba(255,255,255,0.9)\"}}>\n            <div style={{fontSize: \"small\", marginTop:\"10px\", textAlign:\"center\"}}>CHANGE WORD</div>\n            <hr/>\n            <div style={{color:\"black\", padding:\"25px\"}}>\n                <form onSubmit={handleSubmit}>\n                    <Input color=\"primary\" placeholder=\"Enter new word here...\" />\n                    <Button type=\"submit\" value=\"submit\">SUBMIT</Button>\n                    <Button onClick={toggleChangeWord}>GO BACK</Button>\n                    <p style={{fontSize:\"small\", opacity:\"75%\"}}>\n                        Your new word must fit the game's current progress and cannot be a word that has already been guessed incorrectly by the Guesser.\n                        <br/>\n                        If your word change is successful, the Guesser will receive {gamevars[\"OVERTIME_FOR_CHANGE\"]} more seconds for guessing.\n                    </p>\n                </form>\n            </div>\n        </Card>\n    )\n    \n\n    return (\n        <div>\n            {\n                changeWord ? changeWordScreen : wordInfoPanelScreen\n            }\n        </div>\n    )\n}\n\nexport default WordInfoPanel;","import { React } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sendMessage } from \"../actions\"\nimport { Card } from '@mui/material';\n\nfunction EachHint(props) {\n\n    const dispatch = useDispatch();\n    const hintType = props.hintInfo[\"hint_type\"]\n    const hintContent = props.hintInfo[\"content\"]\n    const hintId = props.hintInfo[\"id\"]\n    const authInfo = useSelector(state => state.auth)\n\n    const handleClick = () => {\n            const msg = {\n                \"msg_type\": \"action\",\n                \"action_type\": \"choose_hint\",\n                \"content\": hintId,\n                \"access_token\": authInfo[\"access\"]\n            }\n            dispatch(sendMessage(msg));\n    }\n\n    const renderHintContent = () => {\n        if (hintType === \"image\") {\n            return (\n                <div style={{margin: \"10px\"}}>\n                    <img style={{height: \"150px\"}}src={`data:image/png;base64,${hintContent}`} alt=\"hintImage\"/>\n                </div>\n            )\n        } else {\n            return (\n                <div style={{margin: \"25px\"}}>\n                    <div style={{fontSize: \"large\", fontWeight: \"bolder\"}}>{hintContent}</div>\n                </div>\n            )\n        }\n\n    }\n\n    return (\n        <Card style={{margin: \"5px\", backgroundColor:\"khaki\"}} onClick={props.allowClick ? handleClick : \"\"}>\n            {\n                renderHintContent()\n            }\n        </Card>\n    )\n}\n\nexport default EachHint;","import React, {useRef, useEffect} from 'react'\nimport EachHint from './eachHint';\nimport { useSelector } from 'react-redux';\n\nfunction Hints() {\n\n    const hints = useSelector(state => state.hintsReducer);\n    const AlwaysScrollToBottom = () => {\n        const elementRef = useRef();\n        useEffect(() => elementRef.current.scrollIntoView({ behavior: 'smooth' }));\n        return <div ref={elementRef}/>;\n    } \n\n\n    return (\n        <div>\n            <div style={{textAlign: \"center\", paddingTop: \"3px\", fontSize:\"small\"}}>\n                HINTS\n            </div>\n            <hr/>\n            <div style={{\n                    backgroundColor: \"white\",\n                    height: \"150px\",\n                    width: \"100%\",\n                    overflowY: \"scroll\",\n                    wordWrap: \"break-word\",\n                }}>\n                    {\n                        hints.map(\n                            eachHint => (\n                                <EachHint\n                                    allowClick={false}\n                                    hintInfo={eachHint}\n                                    key={eachHint[\"id\"]}\n                                />\n                            )\n                        )\n                    }\n            </div>\n        </div>\n    )\n\n}\n\nexport default Hints;","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Card from '@mui/material/Card';\nimport Timer from './timer';\nimport WordBoard from './wordBoard';\nimport Keyboard from './keyboard';\nimport WordInfoPanel from './wordInfoPanel';\nimport Chatbox from './chatbox';\nimport Hints from './hints';\nimport { useSelector } from 'react-redux';\n\nfunction GuesserGrid() {\n\n    let myId = useSelector(state => state.myPlayerIdReducer)[\"id\"];\n    console.log(myId)\n    let exId = useSelector(state => state.exReducer)[\"id\"];\n    let gsrId = useSelector(state => state.gsrReducer)[\"id\"];\n    let currentRoundCount = useSelector(state=> state.currentRoundCountReducer);\n    let gamevars = useSelector(state=> state.gamevarsReducer);\n\n    return (\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n            <Timer rightText=\"seconds remaining...\" seconds={gamevars[\"TIME_FOR_GUESSING\"]}></Timer>\n          </Grid>\n          \n          <Grid item xs={5}>\n            <div style={{display: \"flex\", color: \"white\", fontSize: \"xx-large\"}}>\n                <div style={{fontWeight: \"bolder\"}}>ROUND {currentRoundCount}&nbsp;</div><div style={{fontWeight:\"lighter\"}}>of 3</div>\n            </div>\n            <div style={{fontSize: \"medium\", fontWeight: \"normal\", color: \"white\"}}>You're currently playing as the {myId === exId ? \"Executioner\" : \"Guesser\"}...</div>\n          </Grid>\n\n          <Grid item xs={3}>\n            {/* <Card style={{height: \"90%\", width: \"100%\"}}>Player 1 Info.</Card> */}\n          </Grid>\n\n          <Grid item xs={1}>\n            {/* <Card style={{height: \"90%\", width: \"100%\"}}>VS.</Card> */}\n          </Grid>\n\n          <Grid item xs={3}>\n            {/* <Card style={{height: \"90%\", width: \"100%\"}}>Player 2 Info.</Card> */}\n          </Grid>\n\n          <Grid item xs={12}>\n            <hr></hr>\n          </Grid>\n\n          <Grid item xs={4}>\n            <Card style={{height: \"100%\", width: \"100%\"}}>\n              <Hints/>\n            </Card>\n          </Grid>\n          <Grid item xs={8}>\n            <Card style={{height: \"100%\", width: \"100%\"}}>\n                <WordBoard/>\n            </Card>\n          </Grid>\n\n          <Grid item xs={5}>\n            <Chatbox/>\n          </Grid>\n          <Grid item xs={7}>\n            <Card style={{backgroundColor: \"rgba(0,0,0,0.4)\", height: \"100%\"}}>\n              {\n                myId === gsrId ? <Keyboard/> : <WordInfoPanel/>\n              }\n            </Card>\n          </Grid>\n\n        </Grid>\n    )\n}\n\nexport default GuesserGrid;","import React from 'react';\nimport { LinearProgress } from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nfunction GameWaitScreen() {\n\n    const myId = useSelector(state => state.myPlayerIdReducer);\n    const gameState = useSelector(state => state.gameStateReducer);\n    const gamevars = useSelector(state => state.gamevarsReducer);\n\n    return (\n        <div style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundImage: \"linear-gradient(to left top, rgba(0,0,0,0.5), rgba(0,0,0,0.5))\",\n            zIndex: \"2\",\n            maxWidth: \"1000px\",\n            maxHeight: \"750px\",\n            backdropFilter: \"blur(50px)\"\n        }}>\n            <div style={{margin:\"50px\"}}>\n                <div style={{color: \"white\", display: \"block\", width: \"100%\", height: \"100%\"}}>\n                    <div style={{display: \"flex\", paddingTop: \"25px\", paddingBottom: \"25px\"}}>\n                        <div style={{fontWeight: \"bolder\", fontSize: \"xxx-large\"}}>H A N G M _ N</div>\n                        <div style={{fontWeight: \"lighter\", fontSize: \"xxx-large\"}}>ONLINE</div>\n                    </div>\n                    <div>\n                        <LinearProgress color=\"success\" />\n                        <div style={{fontSize: \"x-large\", fontWeight:\"bold\", marginTop: \"10pt\"}}>Hello {myId[\"name\"]}!</div>\n                        <div style={{fontSize: \"medium\", fontWeight: \"light\"}}>\n                            {\n                                (gameState === gamevars[\"GAME_STATE_WAITING\"]) ? \"Waiting for an opponent to connect...\" : \"Opponent found! Game will start shortly...\"\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default GameWaitScreen;","import { Button } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid } from '@mui/material';\nimport {\n    sendMessage\n} from \"../actions\"\n\nfunction ConclusionPage() {\n\n    const dispatch = useDispatch();\n    const p1ScoreBoard = useSelector(state => state.p1ScoreBoardReducer);\n    const p2ScoreBoard = useSelector(state => state.p2ScoreBoardReducer);\n    const myId = useSelector(state => state.myPlayerIdReducer)[\"id\"];\n    const authInfo = useSelector(state => state.auth);\n    const user = authInfo[\"user\"]\n\n    const determineWhosWinning = () => {\n        const iAm = (myId === p1ScoreBoard[\"ID\"]) ? \"p1\" : \"p2\";\n        const myScore = iAm === \"p1\" ? p1ScoreBoard[\"GAME_TOTAL\"] : p2ScoreBoard[\"GAME_TOTAL\"];\n        const opponentScore = iAm === \"p1\" ? p2ScoreBoard[\"GAME_TOTAL\"] : p1ScoreBoard[\"GAME_TOTAL\"];\n        if (myScore === opponentScore) {\n            return \"TIE\"\n        } else if (myScore < opponentScore) {\n            return \"LOSING\"\n        } else {\n            return \"WINNING\"\n        }\n    }\n\n    const handleOnClick = () => {\n        dispatch(sendMessage(\n            {\n                \"msg_type\": \"join\",\n                \"is_guest\": user === null ? true : false,\n                \"player_id\": user !== null ? user[\"id\"] : 0,      // 0 is guest.\n                \"player_name\": user !== null ? user[\"first_name\"] : null,\n                \"game_id\": \"__ANY__\",\n                \"access_token\": authInfo[\"access\"]\n            }\n        ))\n    }\n\n    return (\n        <div style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundImage: \"linear-gradient(to left top, rgba(0,0,0,0.5), rgba(0,0,0,0.5))\",\n            zIndex: \"2\",\n            maxWidth: \"1000px\",\n            maxHeight: \"750px\",\n            backdropFilter: \"blur(50px)\"\n        }}>\n            <div style={{margin:\"50px\"}}>\n                <div style={{color: \"white\", display: \"block\", width: \"100%\", height: \"100%\"}}>\n                    <div style={{display: \"flex\", paddingTop: \"25px\", paddingBottom: \"5px\"}}>\n                        <div style={{fontWeight: \"bolder\", fontSize: \"x-large\"}}>H A N G M _ N</div>\n                        <div style={{fontWeight: \"lighter\", fontSize: \"large\"}}>ONLINE</div>\n                    </div>\n                    <div>\n                        <hr></hr>\n                        <div style={{fontSize: \"x-large\", fontWeight:\"bold\", marginTop: \"10pt\"}}>GAME CONCLUDED</div>\n                        <div style={{fontSize: \"medium\", fontWeight: \"light\"}}>Here are the results.</div>\n                    </div>\n\n                    <div style={{marginTop: \"10pt\"}}>\n                        <Grid container spacing={0.1}>\n                            <Grid item xs={6}>\n                                <div style={{backgroundColor: \"rgba(0,0,0,0.5)\", padding: \"10px\", textAlign: \"center\"}}>\n                                    {p1ScoreBoard[\"NAME\"]}'s FINAL SCORE\n                                </div>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <div style={{backgroundColor: \"rgba(0,0,0,0.5)\", padding: \"10px\", textAlign: \"center\"}}>\n                                    {p2ScoreBoard[\"NAME\"]}'s FINAL SCORE\n                                </div>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <div style={(p1ScoreBoard[\"GAME_TOTAL\"] >= p2ScoreBoard[\"GAME_TOTAL\"]) ?\n                                        {\n                                            borderStyle:\"solid\", \n                                            borderColor: \"red\", \n                                            borderRadius:\"5px\", \n                                            borderWidth: \"2pt\",\n                                            backgroundColor: \"rgba(0,0,0,0.75)\", padding: \"10px\", textAlign: \"center\", fontSize: \"x-large\", fontWeight: \"bolder\", height:\"50px\"\n                                        } : {backgroundColor: \"rgba(0,0,0,0.5)\", padding: \"10px\", textAlign: \"center\", fontSize: \"x-large\", fontWeight: \"bolder\", height:\"50px\"}}>\n                                    {\n                                        p1ScoreBoard[\"GAME_TOTAL\"]\n                                    }                                    {\n                                        p1ScoreBoard[\"DISCONNECTED\"] ? <div style={{color: \"red\", fontSize: \"small\", textAlign: \"center\", fontWeight: \"bolder\"}}>DISCONNECTED</div> : \"\"\n                                    }\n                                </div>\n                            </Grid>\n                            <Grid item xs={6}>\n                                \n                                <div style={(p2ScoreBoard[\"GAME_TOTAL\"] >= p1ScoreBoard[\"GAME_TOTAL\"]) ?\n                                    {\n                                        borderStyle:\"solid\", \n                                        borderColor: \"red\", \n                                        borderRadius:\"5px\", \n                                        borderWidth: \"2pt\",\n                                        backgroundColor: \"rgba(0,0,0,0.75)\", padding: \"10px\", textAlign: \"center\", fontSize: \"x-large\", fontWeight: \"bolder\", height:\"50px\"\n                                    } : {backgroundColor: \"rgba(0,0,0,0.5)\", padding: \"10px\", textAlign: \"center\", fontSize: \"x-large\", fontWeight: \"bolder\", height:\"50px\"}}>\n                                    {\n                                        p2ScoreBoard[\"GAME_TOTAL\"]\n                                    }\n                                    {\n                                        p2ScoreBoard[\"DISCONNECTED\"] ? <div style={{color: \"red\", fontSize: \"small\", textAlign: \"center\", fontWeight: \"bolder\"}}>DISCONNECTED</div> : \"\"\n                                    }\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <div style={{\n                                    borderStyle:\"solid\", \n                                    borderColor: \"red\", \n                                    borderRadius:\"5px\", \n                                    borderWidth: \"2px\",\n                                    margin: \"25px\",\n                                    backgroundColor: \"rgba(0,0,0,0.75)\", padding: \"20px\", textAlign: \"center\", fontSize: \"xx-large\", fontWeight: \"bolder\"}}>\n                                    {\n                                        determineWhosWinning() === \"TIE\" ? \"Tie\" : (determineWhosWinning() === \"WINNING\" ? \"You won!\" : \"Opponent won!\")\n                                    }\n                                </div>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <hr></hr>\n                            </Grid>\n                            {/* <Grid item xs={4}>\n                                <Chatbox/>\n                            </Grid> */}\n                            <Grid item xs={12}>\n                                <div style={{margin: \"10px\"}}>\n                                    <Button variant=\"contained\" onClick={handleOnClick}>Find another game</Button>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ConclusionPage;","import React from 'react'\nimport { useState, useEffect } from 'react';\n\nconst TimerAutomatic = (props) => {\n    const initialSeconds = props.seconds;\n    const [seconds, setSeconds ] =  useState(initialSeconds);\n    useEffect(()=>{\n    let myInterval = setInterval(() => {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            }\n        }, 1000)\n        return ()=> {\n            clearInterval(myInterval);\n          };\n    });\n\n    return (\n        <div style={{\n            backgroundImage: \"linear-gradient(to right, rgba(255,215,100,0.2), gold, rgba(255,215,0,0.5), rgba(255,215,0,0))\",\n            display: \"flex\",\n            padding: \"2pt\",\n            paddingLeft: \"5pt\",\n            marginBottom: \"5pt\",\n            color: \"black\"\n        }}>\n            <div>{props.leftText}&nbsp;</div> \n                    <div>\n                { seconds === 0\n                    ? \"\"\n                    : <div style={{fontWeight: \"bolder\"}}> {seconds < 10 ?  `${seconds}` : seconds}</div> \n                }\n                </div>\n            <div>&nbsp;{props.rightText}</div>\n        </div>\n    )\n}\n\nexport default TimerAutomatic;","import React from 'react'\nimport { useSelector } from \"react-redux\"\nimport Timer from './timer';\nimport TimerAutomatic from './timerAutomatic';\nimport EachHint from './eachHint';\n\nfunction HintChoicePage() {\n\n    const hintsPool = useSelector(state => state.hintsPoolReducer);\n    const gamevars = useSelector(state => state.gamevarsReducer)\n\n    return ( \n        <div \n            style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundImage: \"linear-gradient(to left top, rgba(0,0,0,0.5), rgba(0,0,0,0.5))\",\n            zIndex: \"2\",\n            maxWidth: \"1000px\",\n            maxHeight: \"750px\",\n            backdropFilter: \"blur(50px)\"\n            }}\n        >\n            <div style={{margin: \"50px\"}}>\n\n                <Timer rightText=\"seconds remaining...\" seconds={gamevars[\"TIME_FOR_GUESSING\"]} noMargin={true}/>\n                <TimerAutomatic seconds={gamevars[\"TIME_FOR_CHOOSING_HINT\"]} rightText=\"seconds ...\" leftText=\"A random hint will be chosen in\"/>\n                <div style={{\n                        fontSize: \"xx-large\",\n                        fontWeight: \"bolder\",\n                        color: \"white\"\n                        }}>\n                            CHOOSE A HINT\n                    </div>\n                <div style={{color: \"white\"}}>The Guesser just asked for a hint. Choose one for them.</div><br/>\n\n                <div style={{display:\"flex\"}}>\n                    {   (hintsPool !== null && hintsPool.length !== 0) ?\n                        hintsPool.map(\n                            eachHint => (\n                                eachHint[\"hint_type\"] !== \"image\" ?\n                                <EachHint\n                                    allowClick={true}\n                                    hintInfo={eachHint}\n                                    key={eachHint[\"id\"]}\n                                /> : \"\"\n                            )\n                        ) : \"\"\n                    }\n                </div>\n                <div style={{display:\"flex\"}}>\n                    {\n                        (hintsPool !== null && hintsPool.length !== 0) ?\n                        hintsPool.map(\n                            eachHint => (\n                                eachHint[\"hint_type\"] === \"image\" ?\n                                <EachHint\n                                    allowClick={true}\n                                    hintInfo={eachHint}\n                                    key={eachHint[\"id\"]}\n                                /> : \"\"\n                            )\n                        ) : \"\"\n                    }\n                </div>\n            </div>\n        </div>\n        );\n}\n \nexport default HintChoicePage;","import React from 'react';\nimport Timer from './timer';\nimport HourglassFullIcon from '@mui/icons-material/HourglassFull';\nimport { LinearProgress, Button } from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nfunction GameWelcomeScreen(props) {\n\n    return (\n        <div style={{\n            position: \"absolute\",\n            zIndex: \"2\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundImage: \"linear-gradient(to left top, rgba(0,0,0,0.5), rgba(0,0,0,0.5))\",\n            width: \"1000px\",\n            height: \"750px\",\n            backdropFilter: \"blur(50px)\"\n        }}>\n            <div style={{margin:\"50px\"}}>\n                <div style={{color: \"white\", display: \"block\", width: \"100%\", height: \"100%\"}}><br/><br/>\n                    <div style={{display: \"flex\", paddingTop: \"25px\"}}>\n                        <div style={{fontWeight: \"bolder\", fontSize: \"xxx-large\"}}>H A N G M _ N</div>\n                        <div style={{fontWeight: \"lighter\", fontSize: \"xxx-large\"}}>ONLINE</div>\n                    </div>\n                    <div>An online, modern adaptation of the classic Hangman game.</div><br/>\n                    <hr/>\n                    <div>\n                        <br/>\n                        <Button variant=\"contained\" onClick={()=>props.onClickFunc()}>PLAY NOW</Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default GameWelcomeScreen;","import { useState } from \"react\";\nimport WordEntryScreen from \"./wordEntryScreen\";\nimport GuesserWaitScreen from \"./guesserWaitScreen\";\nimport ConnectionErrorScreen from \"./connectionErrorScreen\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ScoreBoardScreen from \"./scoreBoardScreen\";\nimport GameGrid from \"./gameGrid\";\nimport GameWaitScreen from \"./gameWaitScreen\";\nimport ConclusionPage from \"./conclusionPage\";\nimport HintChoicePage from \"./hintChoicePage\";\nimport GameWelcomeScreen from \"./gameWelcomeScreen\";\nimport {\n  sendMessage\n} from \"../actions\"\n\nfunction Game() {\n\n  const dispatch = useDispatch();\n  const [isReady, setIsReady] = useState(false);\n  const gameState = useSelector(state => state.gameStateReducer)\n  const myPlayerId = useSelector(state => state.myPlayerIdReducer)[\"id\"]\n  const ex = useSelector(state => state.exReducer)[\"id\"]\n  const roundState = useSelector(state => state.roundStateReducer)\n  const disconnected = useSelector(state => state.disconnectedReducer)\n  const hintRequested = useSelector(state => state.hintRequestedReducer)\n  const gamevars = useSelector(state => state.gamevarsReducer)\n  const authInfo = useSelector(state => state.auth);\n  const user = authInfo[\"user\"]\n\n  const handleChooseStage = () => {\n    if (myPlayerId === ex) {\n      return <WordEntryScreen/>;\n    } else {\n      return <GuesserWaitScreen/>;\n    }\n  }\n\n  const handlePlayerReady = () => {\n    setIsReady(true);\n    const msg = {\n      \"msg_type\": \"join\",\n      \"is_guest\": user === null ? true : false,\n      \"player_id\": user !== null ? user[\"id\"] : 0,      // 0 is guest.\n      \"player_name\": user !== null ? user[\"first_name\"] : null,\n      \"game_id\": \"__ANY__\",\n      \"access_token\": authInfo[\"access\"]\n  }\n  dispatch(sendMessage(msg));\n  }\n\n  // const open = () => {\n  // }\n  // const handleClose = () => {\n  // }\n\n  return (\n    <div style={{display: \"flex\", height: \"750px\"}}>\n      {\n        roundState === gamevars[\"ROUND_STATE_RECESS\"] ? <ScoreBoardScreen/> : <div/>\n      }\n      {\n        roundState === gamevars[\"ROUND_STATE_CHOOSING_WORD\"] ? handleChooseStage() : <div/>\n      }\n      <div style={{\n        backgroundImage: \"linear-gradient(to right, rgb(111,50,122), rgb(111,0,233))\",\n        width: \"100%\",\n        maxWidth: \"1000px\",\n        height: \"750px\",\n        }}>\n          \n        <div style={{padding: \"50px\"}}>\n\n          {\n            roundState === gamevars[\"ROUND_STATE_GUESSING_WORD\"] ? <GameGrid/> : <div/>\n          }\n        </div>\n      </div>\n\n      {(ex === myPlayerId && hintRequested) ? <HintChoicePage/> : \"\"}\n      {(!disconnected && gameState === gamevars[\"GAME_STATE_WAITING\"]) ? <GameWaitScreen/> : \"\"}\n      {(gameState === gamevars[\"GAME_STATE_FINISHED\"]) ? <ConclusionPage/> : \"\"}\n      {!isReady ?<GameWelcomeScreen onClickFunc={handlePlayerReady}/> : \"\"}\n      {disconnected ? <ConnectionErrorScreen/> : \"\"}\n\n    </div>\n  );\n}\n\nexport default Game;\n","import { useState, useEffect } from 'react';\nimport React from 'react';\nimport Game from '../components/game';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\n\nconst getServerResponse = (url, pid, setFunc) => {\n    if (pid !== null) {\n        url = url + pid.toString() + \"/\"\n    }\n    fetch(url)\n    .then(response => response.json())\n    .then(jsonObject => setFunc(jsonObject))\n    .catch(error => console.error(error));\n\n    console.log(url)\n}\n\nfunction Home() {\n\n\n    const data = useSelector(state => state.auth, shallowEqual);\n    const userId = data[\"user\"] !== null ? data[\"user\"][\"id\"] : null\n    const username = data[\"user\"] !== null ? data[\"user\"][\"first_name\"] : \"Guest\";\n    const signed_in = data[\"user\"] !== null ? true : false;\n\n    const top_players_api_url = \"http://localhost:8000/gamedata/get_top_players/\";\n    const top_words_api_url = \"http://localhost:8000/gamedata/get_top_words/\";\n    const my_stats_url = \"http://localhost:8000/gamedata/get_my_game_stats/\";\n\n    const [top_players_rows, setTopPlayerRows] = useState([]);\n    const [top_words_rows, setTopWordRows] = useState([]);\n    const [my_stat_row, setMyStatsRow] = useState([]);\n\n    useEffect(() => {\n        getServerResponse(top_players_api_url, null, setTopPlayerRows);\n        getServerResponse(top_words_api_url, null, setTopWordRows);\n        getServerResponse(my_stats_url, userId, setMyStatsRow);\n    }, [userId])\n\n    return (\n    <div className='container'>\n        <div class='jumbotron mt-5'>\n            <h1 class='display-4'>Hello, {username}!</h1>\n            <p class='lead'>\n                {\n                    !signed_in ? \n                    \"You're not signed in. Your game progress will not be saved unless you sign in.\" :\n                    \"You're signed in. Your game progress will be saved.\"\n                }\n            </p>\n            <Game/>\n            <hr class='my-4' />\n\n                <h4 class='display-4'>Game Statistics</h4><br/>\n\n\n                <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                        <TableHead>\n                        <TableRow>\n                            <TableCell><strong>Your Statistics</strong></TableCell>\n                            <TableCell align=\"right\"><strong>Win Ratio</strong></TableCell>\n                            <TableCell align=\"right\"><strong>Games Played</strong></TableCell>\n                        </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {\n                            my_stat_row.length === 0 ? <TableRow><TableCell>No data available.</TableCell></TableRow> : \"\"\n                        }\n                        {my_stat_row.map((row) => (\n                            <TableRow\n                            key={row.pid}\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                            >\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.win_ratio}</TableCell>\n                            <TableCell align=\"right\">{row.games_played}</TableCell>\n                            </TableRow>\n                        ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer><br/>\n\n\n                <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                        <TableHead>\n                        <TableRow>\n                            <TableCell><strong>Top Players</strong></TableCell>\n                            <TableCell align=\"right\"><strong>Win Ratio</strong></TableCell>\n                            <TableCell align=\"right\"><strong>Games Played</strong></TableCell>\n                        </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                top_players_rows.length === 0 ? <TableRow><TableCell>No data available.</TableCell></TableRow> : \"\"\n                            }\n                        {top_players_rows.map((row) => (\n                            <TableRow\n                            key={row.pid}\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                            >\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.win_ratio}</TableCell>\n                            <TableCell align=\"right\">{row.games_played}</TableCell>\n                            </TableRow>\n                        ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer><br/>\n\n                <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                        <TableHead>\n                        <TableRow>\n                            <TableCell><strong>Top Words</strong></TableCell>\n                            <TableCell align=\"right\"><strong>Frequency</strong></TableCell>\n                            <TableCell align=\"right\"><strong>Avg. Score</strong></TableCell>\n                        </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {\n                        top_words_rows.length === 0 ? <TableRow><TableCell>No data available.</TableCell></TableRow> : \"\"\n                        }\n                        {\n                        top_words_rows.map((row) => (\n                            <TableRow\n                            key={row.name}\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                            >\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.word}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.frequency}</TableCell>\n                            <TableCell align=\"right\">{row.avg_score}</TableCell>\n                            </TableRow>\n                        ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer><br/>\n\n        </div>\n    </div>\n    )\n};\n\nexport default Home;\n","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\nexport const ACTIVATION_SUCCESS = 'ACTIVATION_SUCCESS';\nexport const ACTIVATION_FAIL = 'ACTIVATION_FAIL';\nexport const USER_LOADED_SUCCESS = 'USER_LOADED_SUCCESS';\nexport const USER_LOADED_FAIL = 'USER_LOADED_FAIL';\nexport const AUTHENTICATED_SUCCESS = 'AUTHENTICATED_SUCCESS';\nexport const AUTHENTICATED_FAIL = 'AUTHENTICATED_FAIL';\nexport const PASSWORD_RESET_FAIL = 'PASSWORD_RESET_FAIL';\nexport const PASSWORD_RESET_SUCCESS = 'PASSWORD_RESET_SUCCESS';\nexport const PASSWORD_RESET_CONFIRM_FAIL = 'PASSWORD_RESET_CONFIRM_FAIL';\nexport const PASSWORD_RESET_CONFIRM_SUCCESS = 'PASSWORD_RESET_CONFIRM_SUCCESS';\nexport const GOOGLE_AUTH_SUCCESS = 'GOOGLE_AUTH_SUCCESS';\nexport const GOOGLE_AUTH_FAIL = 'GOOGLE_AUTH_FAIL';\nexport const FACEBOOK_AUTH_SUCCESS = 'FACEBOOK_AUTH_SUCCESS';\nexport const FACEBOOK_AUTH_FAIL = 'FACEBOOK_AUTH_FAIL';\nexport const LOGOUT = 'LOGOUT';\n","import axios from 'axios';\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    GOOGLE_AUTH_SUCCESS,\n    GOOGLE_AUTH_FAIL,\n    FACEBOOK_AUTH_SUCCESS,\n    FACEBOOK_AUTH_FAIL,\n    LOGOUT\n} from './types';\n\nexport const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        }; \n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data\n            });\n        } catch (err) {\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n};\n\nexport const googleAuthenticate = (state, code) => async dispatch => {\n    if (state && code && !localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        const details = {\n            'state': state,\n            'code': code\n        };\n\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n\n            dispatch({\n                type: GOOGLE_AUTH_SUCCESS,\n                payload: res.data\n            });\n\n            dispatch(load_user());\n        } catch (err) {\n            dispatch({\n                type: GOOGLE_AUTH_FAIL\n            });\n        }\n    }\n};\n\nexport const checkAuthenticated = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }; \n\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\n\n            if (res.data.code !== 'token_not_valid') {\n                dispatch({\n                    type: AUTHENTICATED_SUCCESS\n                });\n            } else {\n                dispatch({\n                    type: AUTHENTICATED_FAIL\n                });\n            }\n        } catch (err) {\n            dispatch({\n                type: AUTHENTICATED_FAIL\n            });\n        }\n\n    } else {\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        });\n    }\n};\n\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(load_user());\n        return true;\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL\n        })\n        return false;\n    }\n};\n\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ first_name, last_name, email, password, re_password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL\n        })\n    }\n};\n\nexport const verify = (uid, token) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token });\n    console.log(body)\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n        dispatch({\n            type: ACTIVATION_SUCCESS,\n        });\n    } catch (err) {\n        dispatch({\n            type: ACTIVATION_FAIL\n        })\n    }\n};\n\nexport const reset_password = (email) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_FAIL\n        });\n    }\n};\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_FAIL\n        });\n    }\n};\n\nexport const logout = () => dispatch => {\n    dispatch({\n        type: LOGOUT\n    });\n};\n\n\n\n\nexport const facebookAuthenticate = (state, code) => async dispatch => {\n    if (state && code && !localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        const details = {\n            'state': state,\n            'code': code\n        };\n\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`, config);\n\n            dispatch({\n                type: FACEBOOK_AUTH_SUCCESS,\n                payload: res.data\n            });\n\n            dispatch(load_user());\n        } catch (err) {\n            dispatch({\n                type: FACEBOOK_AUTH_FAIL\n            });\n        }\n    }\n};","import React, { useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { login } from '../actions/auth';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\nconst Login = ({ login, isAuthenticated }) => {\n    const [formData, setFormData] = useState({\n        email: '',\n        password: '' \n    });\n\n    const { email, password } = formData;\n\n    // const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n    const [correctComb, setCorrectComb] = useState(0);\n    const onChange = e => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n        setCorrectComb(0);\n    }\n\n    const onSubmit = e => {\n        e.preventDefault();\n        const res = login(email, password);\n        if (res === true) {\n            setCorrectComb(1);\n        } else {\n            setCorrectComb(2);\n        }\n    };\n\n    const continueWithGoogle = async () => {\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?redirect_uri=${process.env.REACT_APP_API_URL}/google`)\n            window.location.replace(res.data.authorization_url);\n        } catch (err) {\n        }\n    };\n\n    if (isAuthenticated) {\n        return <Redirect to='/' />\n    } \n\n    return (\n        <div className='container mt-5'>\n            <h1>Sign In</h1>\n            <p>Sign into your Account</p>\n            {\n                correctComb == 2 ?\n                    <div class=\"alert alert-danger\" role=\"alert\">\n                        Invalid username or password.\n                    </div>\n                    :\n                    \"\"\n            }\n            <form onSubmit={e => onSubmit(e)}>\n                <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='email'\n                        placeholder='Email'\n                        name='email'\n                        value={email}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='password'\n                        placeholder='Password'\n                        name='password'\n                        value={password}\n                        onChange={e => onChange(e)}\n                        minLength='6'\n                        required\n                    />\n                </div>\n                <button className='btn btn-primary' type='submit'>Login</button>\n            </form>\n            <button className='btn btn-danger mt-3' onClick={continueWithGoogle}>\n                Continue With Google\n            </button>\n            {/* <br />\n            <button className='btn btn-primary mt-3' onClick={continueWithFacebook}>\n                Continue With Facebook\n            </button> */}\n            <p className='mt-3'>\n                Don't have an account? <Link to='/signup'>Sign Up</Link>\n            </p>\n            <p className='mt-3'>\n                Forgot your Password? <Link to='/reset-password'>Reset Password</Link>\n            </p>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n","import React, { useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signup } from '../actions/auth';\nimport axios from 'axios';\n\nconst Signup = ({ signup, isAuthenticated }) => {\n    const [accountCreated, setAccountCreated] = useState(false);\n    const [formData, setFormData] = useState({\n        first_name: '',\n        last_name: 'DOE',\n        email: '',\n        password: '',\n        re_password: ''\n    });\n\n    const { first_name, last_name, email, password, re_password } = formData;\n\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    const onSubmit = e => {\n        e.preventDefault();\n\n        if (password === re_password) {\n            signup(first_name, last_name, email, password, re_password);\n            setAccountCreated(true);\n        }\n    };\n\n    const continueWithGoogle = async () => {\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?redirect_uri=${process.env.REACT_APP_API_URL}/google`)\n\n            window.location.replace(res.data.authorization_url);\n        } catch (err) {\n\n        }\n    };\n\n    const continueWithFacebook = async () => {\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/o/facebook/?redirect_uri=${process.env.REACT_APP_API_URL}/facebook`)\n\n            window.location.replace(res.data.authorization_url);\n        } catch (err) {\n\n        }\n    };\n\n    if (isAuthenticated) {\n        return <Redirect to='/' />\n    }\n    if (accountCreated) {\n        return <Redirect to='/login' />\n    }\n\n    return (\n        <div className='container mt-5'>\n            <h1>Sign Up</h1>\n            <p>Create your Account</p>\n            <form onSubmit={e => onSubmit(e)}>\n                <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='text'\n                        placeholder='Username*'\n                        name='first_name'\n                        value={first_name}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='email'\n                        placeholder='Email*'\n                        name='email'\n                        value={email}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='password'\n                        placeholder='Password*'\n                        name='password'\n                        value={password}\n                        onChange={e => onChange(e)}\n                        minLength='6'\n                        required\n                    />\n                </div>\n                <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='password'\n                        placeholder='Confirm Password*'\n                        name='re_password'\n                        value={re_password}\n                        onChange={e => onChange(e)}\n                        minLength='6'\n                        required\n                    />\n                </div>\n            <div style={{display:\"inline\"}}>\n                <button className='btn btn-primary' type='submit'>Register</button>\n            </div>\n            </form>\n            \n            <button className='btn btn-danger mt-2' onClick={continueWithGoogle}>Sign Up With Google</button>\n            {/* <button className='btn btn-primary mt-3' onClick={continueWithFacebook}>\n                Continue With Facebook\n            </button> */}\n            <p className='mt-3'>\n                Already have an account? <Link to='/login'>Sign In</Link>\n            </p>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, { signup })(Signup);\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { verify } from '../actions/auth';\n\nconst Activate = ({ verify, match }) => {\n    const [verified, setVerified] = useState(false);\n\n    const verify_account = e => {\n        const uid = match.params.uid;\n        const token = match.params.token;\n\n        verify(uid, token);\n        setVerified(true);\n    };\n\n    if (verified) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div className='container'>\n            <div \n                className='d-flex flex-column justify-content-center align-items-center'\n                style={{ marginTop: '200px' }}\n            >\n                <h1>Verify your Account:</h1>\n                <button\n                    onClick={verify_account}\n                    style={{ marginTop: '50px' }}\n                    type='button'\n                    className='btn btn-primary'\n                >\n                    Verify\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default connect(null, { verify })(Activate);\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { reset_password } from '../actions/auth';\n\nconst ResetPassword = ({ reset_password }) => {\n    const [requestSent, setRequestSent] = useState(false);\n    const [formData, setFormData] = useState({\n        email: ''\n    });\n\n    const { email } = formData;\n\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    const onSubmit = e => {\n        e.preventDefault();\n\n        reset_password(email);\n        setRequestSent(true);\n    };\n\n    if (requestSent) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div className='container mt-5'>\n            <h1>Password Reset</h1>\n            <div>Please enter your email below. You will receive an email that contains directions to reset your password.</div>\n            <br/>\n            <form onSubmit={e => onSubmit(e)}>\n                <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='email'\n                        placeholder='Email'\n                        name='email'\n                        value={email}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                <button className='btn btn-primary' type='submit'>Confirm</button>\n            </form>\n        </div>\n    );\n};\n\nexport default connect(null, { reset_password })(ResetPassword);\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { reset_password_confirm } from '../actions/auth';\n\nconst ResetPasswordConfirm = ({ match, reset_password_confirm }) => {\n    const [requestSent, setRequestSent] = useState(false);\n    const [formData, setFormData] = useState({\n        new_password: '',\n        re_new_password: ''\n    });\n\n    const { new_password, re_new_password } = formData;\n\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    const onSubmit = e => {\n        e.preventDefault();\n\n        const uid = match.params.uid;\n        const token = match.params.token;\n\n        reset_password_confirm(uid, token, new_password, re_new_password);\n        setRequestSent(true);\n    };\n\n    if (requestSent) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div className='container mt-5'>\n            <form onSubmit={e => onSubmit(e)}>\n            <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='password'\n                        placeholder='New Password'\n                        name='new_password'\n                        value={new_password}\n                        onChange={e => onChange(e)}\n                        minLength='6'\n                        required\n                    />\n                </div>\n                <div className='form-group'>\n                    <input\n                        className='form-control'\n                        type='password'\n                        placeholder='Confirm New Password'\n                        name='re_new_password'\n                        value={re_new_password}\n                        onChange={e => onChange(e)}\n                        minLength='6'\n                        required\n                    />\n                </div>\n                <button className='btn btn-primary' type='submit'>Reset Password</button>\n            </form>\n        </div>\n    );\n};\n\nexport default connect(null, { reset_password_confirm })(ResetPasswordConfirm);\n","import React, { useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { facebookAuthenticate } from '../actions/auth';\nimport queryString from 'query-string';\n\nconst Facebook = ({ facebookAuthenticate }) => {\n    let location = useLocation();\n\n    useEffect(() => {\n        const values = queryString.parse(location.search);\n        const state = values.state ? values.state : null;\n        const code = values.code ? values.code : null;\n\n        console.log('State: ' + state);\n        console.log('Code: ' + code);\n\n        if (state && code) {\n            facebookAuthenticate(state, code);\n        }\n    }, [location]);\n\n    return (\n        <div className='container'>\n            <div class='jumbotron mt-5'>\n                <h1 class='display-4'>Welcome to Auth System!</h1>\n                <p class='lead'>This is an incredible authentication system with production level features!</p>\n                <hr class='my-4' />\n                <p>Click the Log In button</p>\n                <Link class='btn btn-primary btn-lg' to='/login' role='button'>Login</Link>\n            </div>\n        </div>\n    );\n};\n\nexport default connect(null, { facebookAuthenticate })(Facebook);\n","import React, { useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { googleAuthenticate } from '../actions/auth';\nimport queryString from 'query-string';\n\nconst Google = ({ googleAuthenticate }) => {\n    let location = useLocation();\n\n    useEffect(() => {\n        const values = queryString.parse(location.search);\n        const state = values.state ? values.state : null;\n        const code = values.code ? values.code : null;\n\n        console.log('State: ' + state);\n        console.log('Code: ' + code);\n\n        if (state && code) {\n            googleAuthenticate(state, code);\n        }\n    }, [location]);\n\n    return (\n        <div className='container'>\n            <div class='jumbotron mt-5'>\n                <h1 class='display-4'>Welcome to Hangman Online!</h1>\n                <p class='lead'>You're now signed in through Google. Click on the \"START PLAYING\" button to start playing!</p>\n                <hr class='my-4' />\n                <Link class='btn btn-primary btn-lg' to='/' role='button'>START PLAYING</Link>\n            </div>\n        </div>\n    );\n};\n\nexport default connect(null, { googleAuthenticate })(Google);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n\n// mainMsg: the main message to display.\n// variant: success/error/warning.\n// linkName: name of new link to jump to.\n// link: actual link to the redirected page.\n\nconst RedirectPage = (props) => (\n    <div className='container'>\n        <div class='jumbotron mt-5'>\n            <h2>{props.mainMsg}</h2>\n            <h2>Account created successfully!</h2>\n            <hr class='my-4' />\n            <p>You will be redirected to your {props.linkName} or you can&nbsp;\n            <Link to={props.linkName}>click here directly</Link>\n            .</p>\n        </div>\n    </div>\n);\n\nexport default RedirectPage;\n","const allMessagesReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"ADD_NEW_MESSAGE\":\n            return [...state, action.data]\n        default:\n            return state\n    }\n}\n\nexport default allMessagesReducer;","const serverSocketReducer = (state=null, action) => {\n    switch(action.type) {\n        case \"SET_SERVER_SOCKET\":\n            if (state == null) {\n                state = action.data;\n            }\n            return action.data;\n        case \"SEND_MESSAGE\":\n            state.send(JSON.stringify(action.data));\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default serverSocketReducer;","const defaultConfig = {\n    \"MAX_ROUNDS\" : 3,\n    \"GAME_STATE_WAITING\" : 0,\n    \"GAME_STATE_READY\" : 1,\n    \"GAME_STATE_IN_PROGRESS\": 2,\n    \"GAME_STATE_FINISHED\" : 3,\n    \"ROUND_STATE_READY\" : 0,\n    \"ROUND_STATE_CHOOSING_WORD\" : 1,\n    \"ROUND_STATE_GUESSING_WORD\" : 2,\n    \"ROUND_STATE_RECESS\" : 3,\n    \"TIME_FOR_READY\" : 1,\n    \"TIME_FOR_CHOOSING\" : 10,\n    \"TIME_FOR_GUESSING\" : 500,\n    \"TIME_FOR_RECESS\" : 10,\n    \"TIME_FOR_CHOOSING_HINT\" : 10,\n    \"OVERTIME_FOR_CHANGE\" : 20,\n    \"MAX_BASE_POINTS\": 1000,\n    \"MAX_BONUS_POINTS\": 500,\n    \"MAX_PROGRESSION_POINTS\": 500,\n    \"COMPENSATION_FOR_RANDOM\": 100,\n    \"PENALTY_FOR_HINT\": -25,\n    \"PENALTY_FOR_FALSE_GUESS\": -200\n}\n\nconst gamevarsReducer = (state=defaultConfig, action) => {\n    switch(action.type) {\n        case \"SET_GAMEVARS\":\n            state = action.data;\n            return action.data;\n        default:\n            return state;\n    }\n}\n\nexport default gamevarsReducer;","const gameStateReducer = (state=0, action) => {\n    switch(action.type) {\n        case \"SET_GAME_STATE\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default gameStateReducer;","const currentRoundCountReducer = (state=0, action) => {\n    switch(action.type) {\n        case \"SET_CURRENT_ROUND_COUNT\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default currentRoundCountReducer;","const hintsPoolReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"SET_HINTS_POOL\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default hintsPoolReducer;","const exReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"SET_EX\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default exReducer;","const gsrReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"SET_GSR\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default gsrReducer;","const boardReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"SET_BOARD\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default boardReducer;","const chosenWordReducer = (state=null, action) => {\n    switch(action.type) {\n        case \"SET_CHOSEN_WORD\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default chosenWordReducer;","const cguessesReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"SET_CGUESSES\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default cguessesReducer;","const fguessesReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"SET_FGUESSES\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default fguessesReducer;","const hintsReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"SET_HINTS\":\n            state = action.data;\n            state.reverse();\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default hintsReducer;","const hintRequestedReducer = (state=false, action) => {\n    switch(action.type) {\n        case \"SET_HINT_REQUESTED\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default hintRequestedReducer;","const p1ScoreBoardReducer = (state={\"FINISHED_GUESSING\": false, \"GAME_TOTAL\" : 0, \"DISCONNECTED\" : false}, action) => {\n    switch(action.type) {\n        case \"SET_P1_SCORE_BOARD\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default p1ScoreBoardReducer;","const p2ScoreBoardReducer = (state={\"FINISHED_GUESSING\": false, \"GAME_TOTAL\" : 0, \"DISCONNECTED\" : false}, action) => {\n    switch(action.type) {\n        case \"SET_P2_SCORE_BOARD\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default p2ScoreBoardReducer;","const rotatedReducer = (state=false, action) => {\n    switch(action.type) {\n        case \"SET_ROTATED\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default rotatedReducer;","const roundStateReducer = (state=0, action) => {\n    switch(action.type) {\n        case \"SET_ROUND_STATE\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default roundStateReducer;","const wordWasRandomReducer = (state=false, action) => {\n    switch(action.type) {\n        case \"SET_WORD_WAS_RANDOM\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default wordWasRandomReducer;","const guessedCorrectlyReducer = (state=false, action) => {\n    switch(action.type) {\n        case \"SET_GUESSED_CORRECTLY\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default guessedCorrectlyReducer;","const wrongGuessesReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"SET_WRONG_GUESSES\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default wrongGuessesReducer;","const defaultVals = {\n    \"id\": 0,\n    \"name\": \"PLACEHOLDER\"\n}\n\nconst myPlayerIdReducer = (state=defaultVals, action) => {\n    switch(action.type) {\n        case \"SET_MY_PLAYER_ID\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default myPlayerIdReducer;","const disconnectedReducer = (state=false, action) => {\n    switch(action.type) {\n        case \"SET_DISCONNECTED\":\n            state = action.data;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default disconnectedReducer;","const timerReducer = (state=0, action) => {\n    switch(action.type) {\n        case \"SET_TIMER\":\n            state = action.data;\n            return action.data;\n        default:\n            return state;\n    }\n}\n\nexport default timerReducer;","import {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    GOOGLE_AUTH_SUCCESS,\n    GOOGLE_AUTH_FAIL,\n    FACEBOOK_AUTH_SUCCESS,\n    FACEBOOK_AUTH_FAIL,\n    LOGOUT\n} from '../actions/types';\n\nconst initialState = {\n    access: localStorage.getItem('access'),\n    refresh: localStorage.getItem('refresh'),\n    isAuthenticated: null,\n    user: null\n};\n\nexport default function(state = initialState, action) {\n    const { type, payload } = action;\n\n    switch(type) {\n        case AUTHENTICATED_SUCCESS:\n            return {\n                ...state,\n                isAuthenticated: true\n            }\n        case LOGIN_SUCCESS:\n        case GOOGLE_AUTH_SUCCESS:\n        case FACEBOOK_AUTH_SUCCESS:\n            localStorage.setItem('access', payload.access);\n            localStorage.setItem('refresh', payload.refresh);\n            return {\n                ...state,\n                isAuthenticated: true,\n                access: payload.access,\n                refresh: payload.refresh\n            }\n        case SIGNUP_SUCCESS:\n            return {\n                ...state,\n                isAuthenticated: false\n            }\n        case USER_LOADED_SUCCESS:\n            return {\n                ...state,\n                user: payload\n            }\n        case AUTHENTICATED_FAIL:\n            return {\n                ...state,\n                isAuthenticated: false\n            }\n        case USER_LOADED_FAIL:\n            return {\n                ...state,\n                user: null\n            }\n        case GOOGLE_AUTH_FAIL:\n        case FACEBOOK_AUTH_FAIL:\n        case LOGIN_FAIL:\n        case SIGNUP_FAIL:\n        case LOGOUT:\n            localStorage.removeItem('access');\n            localStorage.removeItem('refresh');\n            return {\n                ...state,\n                access: null,\n                refresh: null,\n                isAuthenticated: false,\n                user: null\n            }\n        case PASSWORD_RESET_SUCCESS:\n        case PASSWORD_RESET_FAIL:\n        case PASSWORD_RESET_CONFIRM_SUCCESS:\n        case PASSWORD_RESET_CONFIRM_FAIL:\n        case ACTIVATION_SUCCESS:\n        case ACTIVATION_FAIL:\n            return {\n                ...state\n            }\n        default:\n            return state\n    }\n};\n","import { combineReducers } from \"redux\";\n\nimport allMessagesReducer from \"./allMessages\";\nimport serverSocketReducer from \"./serverSocket\";\nimport gamevarsReducer from \"./gamevars\";\nimport gameStateReducer from \"./gameState\";\nimport currentRoundCountReducer from \"./currentRoundCount\";\nimport hintsPoolReducer from \"./hintsPool\";\nimport exReducer from \"./ex\";\nimport gsrReducer from \"./gsr\";\nimport boardReducer from \"./board\";\nimport chosenWordReducer from \"./chosenWord\";\nimport cguessesReducer from \"./cguesses\";\nimport fguessesReducer from \"./fguesses\";\nimport hintsReducer from \"./hints\";\nimport hintRequestedReducer from \"./hintRequested\";\nimport p1ScoreBoardReducer from \"./p1ScoreBoard\";\nimport p2ScoreBoardReducer from \"./p2ScoreBoard\";\nimport rotatedReducer from \"./rotated\";\nimport roundStateReducer from \"./roundState\";\nimport wordWasRandomReducer from \"./wordWasRandom\";\nimport guessedCorrectlyReducer from \"./guessedCorrectly\";\nimport wrongGuessesReducer from \"./wrongGuesses\";\nimport myPlayerIdReducer from \"./myPlayerId\";\nimport disconnectedReducer from \"./disconnected\";\nimport timerReducer from \"./timer\";\nimport auth from './auth';\n\nconst allReducers = combineReducers(\n    {\n        auth,\n        allMessagesReducer,\n        serverSocketReducer,\n        gamevarsReducer,\n        gameStateReducer,\n        currentRoundCountReducer,\n        hintsPoolReducer,\n        exReducer,\n        gsrReducer,\n        boardReducer,\n        cguessesReducer,\n        fguessesReducer,\n        hintsReducer,\n        hintRequestedReducer,\n        p1ScoreBoardReducer,\n        p2ScoreBoardReducer,\n        rotatedReducer,\n        roundStateReducer,\n        wordWasRandomReducer,\n        guessedCorrectlyReducer,\n        wrongGuessesReducer,\n        myPlayerIdReducer,\n        chosenWordReducer,\n        disconnectedReducer,\n        timerReducer,\n    }\n)\n\nexport default allReducers;","import { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React, { Fragment, useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logout } from '../actions/auth';\n\nconst Navbar = ({ logout, isAuthenticated }) => {\n    const [redirect, setRedirect] = useState(false);\n\n    const logout_user = () => {\n        logout();\n        setRedirect(true);\n    };\n\n    const guestLinks = () => (\n        <Fragment>\n            <li className='nav-item'>\n                <Link className='nav-link' to='/login'>Login</Link>\n            </li>\n            <li className='nav-item'>\n                <Link className='nav-link' to='/signup'>Sign Up</Link>\n            </li>\n        </Fragment>\n    );\n\n    const authLinks = () => (\n        <li className='nav-item'>\n            <a className='nav-link' href='#!' onClick={logout_user}>Logout</a>\n        </li>\n    );\n\n    return (\n        <Fragment>\n            <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n                <Link className='navbar-brand' to='/'>HANGMAN ONLINE</Link>\n                <button \n                    className='navbar-toggler' \n                    type='button' \n                    data-toggle='collapse' \n                    data-target='#navbarNav' \n                    aria-controls='navbarNav' \n                    aria-expanded='false' \n                    aria-label='Toggle navigation'\n                >\n                    <span className='navbar-toggler-icon'></span>\n                </button>\n                <div className='collapse navbar-collapse' id='navbarNav'>\n                    <ul className='navbar-nav'>\n                        <li className='nav-item active'>\n                            <Link className='nav-link' to='/'>Home <span className='sr-only'>(current)</span></Link>\n                        </li>\n                        {isAuthenticated ? authLinks() : guestLinks()}\n                    </ul>\n                </div>\n            </nav>\n            {redirect ? <Redirect to='/' /> : <Fragment></Fragment>}\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, { logout })(Navbar);","import React, { useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport { connect } from 'react-redux';\nimport { checkAuthenticated, load_user } from '../actions/auth';\n\nconst Layout = ({ checkAuthenticated, load_user, children }) => {\n    useEffect(() => {\n        checkAuthenticated();\n        load_user();\n    }, []);\n\n    return (\n        <div>\n            <Navbar />\n            {children}\n        </div>\n    );\n};\n\nexport default connect(null, { checkAuthenticated, load_user })(Layout);\n","import { useDispatch } from \"react-redux\";\nimport {\n    setServerWebsocket,\n    setGamevars,\n    setGameState,\n    setBoard,\n    setCguesses,\n    setChosenWord,\n    setCurrentRoundCount,\n    setEx,\n    setFguesses,\n    setGsr,\n    setGuessedCorrectly,\n    setHintRequested,\n    setHints,\n    setHintsPool, \n    setP1ScoreBoard,  \n    setP2ScoreBoard,\n    setRotated, \n    setRoundState,\n    setWordWasRandom,\n    setWrongGuesses,\n    setMyPlayerId,\n    setDisconnected,\n    addNewMessage,\n    setTimer\n  } from \"../actions\";\n\nexport default function SocketConnection() {\n  \n  const dispatch = useDispatch();\n  const addr = \"ws://localhost:8765\";\n  // const addr = \"ws://10.0.0.110:8765/\";\n  var socket = new WebSocket(addr);\n\n  socket.onopen = function(e) {\n      console.log(\"[CONNECTION ESTABLISHED] Connected to server.\");\n    }\n    socket.onmessage = function(e) {\n      processMessage(JSON.parse(e.data))\n    }\n    socket.onclose = function(e) {\n      dispatch(setDisconnected(true));\n      if (e.wasClean) {\n        console.log(\"[CONNECTION CLOSED] Connection closed cleanly\\n\");\n      } else {\n        console.log(\"[CONNECTION CLOSED] Connection died unexpectedly.\\n\")\n      }\n    };\n\n\n  // this function processes server messages.\n  const processMessage = function(msg) {\n      const msg_type = msg[\"msg_type\"]\n      if (msg_type === \"update\") {\n        const update_type = msg[\"update_type\"]\n        const content = msg[\"content\"]\n        switch(update_type) {\n          case \"game_state\":\n            dispatch(setGameState(content)); return;\n          case \"current_round_count\":\n            dispatch(setCurrentRoundCount(content)); return;\n          case \"__chosen_word\":\n            dispatch(setChosenWord(content)); return;\n          case \"__hints\":\n            dispatch(setHintsPool(content)); return;\n          case \"ex\":\n            dispatch(setEx(content)); return;\n          case \"gsr\":\n            dispatch(setGsr(content)); return;\n          case \"board\":\n            dispatch(setBoard(content)); return;\n          case \"cguesses\":\n            dispatch(setCguesses(content)); return;\n          case \"fguesses\":\n            dispatch(setFguesses(content)); return;\n          case \"hints\":\n            dispatch(setHints(content)); return;\n          case \"hint_requested\":\n            dispatch(setHintRequested(content)); return;\n          case \"p1scoreboard\":\n            dispatch(setP1ScoreBoard(content)); return;\n          case \"p2scoreboard\":\n            dispatch(setP2ScoreBoard(content)); return;\n          case \"rotated\":\n            dispatch(setRotated(content)); return;\n          case \"round_state\":\n            dispatch(setRoundState(content)); return;\n          case \"word_was_random\":\n            dispatch(setWordWasRandom(content)); return;\n          case \"guessed_correctly\":\n            dispatch(setGuessedCorrectly(content)); return;\n          case \"wrong_guesses\":\n            dispatch(setWrongGuesses(content)); return;\n          case \"timer\":\n            dispatch(setTimer(content)); return;\n          default:\n            return;\n        }\n      } else if (msg_type === \"information\") {\n        const information_type = msg[\"information_type\"];\n        const content = msg[\"content\"]\n        if (information_type === \"GAMEVARS\") {\n          dispatch(setGamevars(content));\n        } else if (information_type === \"your_info\") {\n          dispatch(setMyPlayerId(content));\n        } \n      } else if (msg_type === \"notification\") {\n        const notification_type = msg[\"notification_type\"];\n        const content = msg[\"content\"]\n        if (notification_type === \"warning\" || notification_type === \"success\" && msg[\"show\"]) {\n            const newJson = {\n              \"chat_type\" : notification_type,\n              \"sender\" : \"SERVER\",\n              \"content\" : content\n            }\n            dispatch(addNewMessage(newJson));\n          }\n      } else if (msg_type === \"chat\") {\n        const chat_type = msg[\"chat_type\"];\n        const sender = msg[\"sender\"];\n        const content = msg[\"content\"];\n        const newJson = {\n          \"chat_type\" : chat_type,\n          \"sender\" : sender,\n          \"content\" : content\n        }\n          dispatch(addNewMessage(newJson));\n      }\n    }\n\n  // SETTING REDUX SOCKET STATE so the socket is more accessible.\n  dispatch(setServerWebsocket(socket));\n\n  return (\n    <div></div>\n  )\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Home from './containers/Home';\nimport Login from './containers/Login';\nimport Signup from './containers/Signup';\nimport Activate from './containers/Activate';\nimport ResetPassword from './containers/ResetPassword';\nimport ResetPasswordConfirm from './containers/ResetPasswordConfirm';\nimport Facebook from './containers/Facebook';\nimport Google from './containers/Google';\nimport RedirectPage from './containers/RedirectPage'\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport Layout from './hocs/Layout';\nimport SocketConnection from './utils/socketConnection';\n\nconst App = () => (\n    <Provider store={store}>\n        <SocketConnection/>\n        <Router>\n            <Layout>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route exact path='/login' component={Login} />\n                    <Route exact path='/signup' component={Signup} />\n                    <Route exact path='/facebook' component={Facebook} />\n                    <Route exact path='/google' component={Google} />\n                    <Route exact path='/redirectpage' component={RedirectPage} />\n                    <Route exact path='/reset-password' component={ResetPassword} />\n                    <Route exact path='/password/reset/confirm/:uid/:token' component={ResetPasswordConfirm} />\n                    <Route exact path='/activate/:uid/:token' component={Activate} />\n                </Switch>\n            </Layout>\n        </Router>\n    </Provider>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <>\n      <App />\n    </>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}